import net.fabricmc.loom.task.RemapJarTask

plugins {
    // Unlike most projects, we choose to pin the specific version of Loom.
    // This prevents a lot of issues where the build script can fail randomly because the Fabric Maven server
    // is not reachable for some reason, and it makes builds much more reproducible. Observation also shows that it
    // really helps to improve startup times on slow connections.
    id 'fabric-loom' version '1.3.8'

    // Vineflower is a fork of the FernFlower decompiler which contains many enhancements and bug fixes, and generally
    // produces much better source code. The Minecraft sources can be decompiled using it with the
    // "genSourcesWithVineflower" task.
    // (Note: Quiltflower was renamed to Vineflower in early July 2023.)
    id 'io.github.juuxel.loom-vineflower' version '1.11.0'

    // This dependency is only used to determine the state of the Git working tree so that build artifacts can be
    // more easily identified. TODO: Lazily load GrGit via a service only when builds are performed.
    id 'org.ajoberstar.grgit' version '5.0.0'
}

apply from: "${rootProject.projectDir}/gradle/fabric.gradle"
apply from: "${rootProject.projectDir}/gradle/java.gradle"

archivesBaseName = "${project.archives_base_name}-mc${project.minecraft_version}"
version = "${project.mod_version}${getVersionMetadata()}"
group = project.maven_group

loom {
    mixin.defaultRefmapName = "mixins.sodium.refmap.json"
    accessWidenerPath = file("src/main/resources/sodium.accesswidener")
}

configurations {
    modIncludeImplementation

    include.extendsFrom modIncludeImplementation
    modImplementation.extendsFrom modIncludeImplementation
}

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }
}

tasks.register('apiJar', Jar) {
    archiveClassifier.set "api-dev"

    from sourceSets.api.output
}

tasks.register('remapApiJar', RemapJarTask) {
    dependsOn apiJar
    archiveClassifier.set "api"

    input = apiJar.archiveFile.get().asFile
    addNestedDependencies = false
}

build.dependsOn apiJar
build.dependsOn remapApiJar

jar {
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modIncludeImplementation(fabricApi.module("fabric-api-base", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-block-view-api-v2", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-rendering-fluids-v1", project.fabric_version))
    // `fabricApi.module` does not work with deprecated modules, so add the module dependency manually.
    // This is planned to be fixed in Loom 1.4.
    // modIncludeImplementation(fabricApi.module("fabric-rendering-data-attachment-v1", project.fabric_version))
    modIncludeImplementation("net.fabricmc.fabric-api:fabric-rendering-data-attachment-v1:0.3.38+73761d2e9a")
    modIncludeImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
}

def getVersionMetadata() {
    // CI builds only
    if (project.hasProperty("build.release")) {
        return "" // no tag whatsoever
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "+git.${id}"
    }

    // No tracking information could be found about the build
    return "+unknown"
}
